name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AM UTC
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  code-security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt
      continue-on-error: true
    
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/
        semgrep --config=auto src/
      continue-on-error: true
    
    - name: Upload code security scan results
      uses: actions/upload-artifact@v3
      with:
        name: code-security-results
        path: |
          bandit-report.json
          semgrep-report.json

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for comprehensive scan
    
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses licensecheck
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical
    
    - name: Validate license compatibility
      run: |
        # Check for GPL or other restrictive licenses
        pip-licenses --format=csv | grep -E "GPL|AGPL|LGPL" && exit 1 || echo "No restrictive licenses found"
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  container-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t spike-compiler-security:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'spike-compiler-security:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  sbom-generation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install SBOM tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install cyclonedx-bom
    
    - name: Generate Python SBOM
      run: |
        cyclonedx-py requirements -o sbom-python.json
    
    - name: Build Docker image for container SBOM
      run: |
        docker build -t spike-compiler-sbom:latest .
    
    - name: Generate container SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: spike-compiler-sbom:latest
        format: spdx-json
        output-file: sbom-container.spdx.json
    
    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          sbom-python.json
          sbom-container.spdx.json

  security-report:
    needs: [dependency-scan, code-security-scan, license-compliance, container-security, sbom-generation]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check if any critical issues were found
        if [ -f "dependency-scan-results/safety-report.json" ]; then
          echo "- Dependency scan: $(jq '.vulnerabilities | length' dependency-scan-results/safety-report.json) vulnerabilities found" >> security-summary.md
        fi
        
        if [ -f "code-security-results/bandit-report.json" ]; then
          echo "- Code security scan: $(jq '.results | length' code-security-results/bandit-report.json) issues found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Artifacts Generated" >> security-summary.md
        echo "- Software Bill of Materials (SBOM)" >> security-summary.md
        echo "- License compliance report" >> security-summary.md
        echo "- Container vulnerability scan" >> security-summary.md
        
        cat security-summary.md
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
